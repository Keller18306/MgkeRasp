(()=>{"use strict";var e={254:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;const r=n(655),o=n(391),i=r.__importDefault(n(345)),s=n(593);t.Builder=class{static init(){return new this}input=null;copyButton=null;jsonTextArea;iframe;debug=null;timetable=null;groups={};constructor(){window.addEventListener("load",this.onLoad.bind(this))}onLoad(){if(this.input=document.querySelector(".mgke-uploader-form input[name=files]"),this.copyButton=document.querySelector(".mgke-uploader-form input[name=copy-html]"),!this.input||!this.copyButton)return void console.error("Some part of form not found");if(this.copyButton.onclick=this.onCopy.bind(this),this.input.onchange=this.onSelectFiles.bind(this),this.debug=document.querySelector(".mgke-debug"),this.timetable=document.querySelector(".mgke-timetable"),!this.timetable)return void console.error("Timetable div is not found");const e=localStorage.getItem("savedGroups");e&&(this.groups=JSON.parse(e)),Object.keys(this.groups).length&&this.printGroupsData()}async onSelectFiles(e){const t=this.input.files;if(t){this.groups={};for(const e of Array.from(t)){const t=await(0,s.readFile)(e,"windows-1251");if(this.iframe&&this.iframe.remove(),this.iframe=await(0,o.createIframe)(this.debug?this.debug:document,t,!this.debug),!this.iframe.contentWindow||!this.iframe.contentDocument)return void console.error("could load iframe");new i.default(this.iframe.contentWindow).run(this.groups),this.debug||(this.iframe.remove(),this.iframe=void 0)}localStorage.setItem("savedGroups",JSON.stringify(this.groups)),this.printGroupsData()}}async onCopy(e){let t="";t+="\x3c!-- Данный блок данных скопирован из конвертера --\x3e\n",t+='<script id="mgke-json-input" type="application/json">\n',t+=JSON.stringify(this.groups),t+="\n<\/script>",t+="\n\x3c!-- Данный блок данных скопирован из конвертера --\x3e",navigator.clipboard.writeText(t)}printGroupsData(){if(this.timetable?.children){const e=Array.from(this.timetable?.children);for(const t of e)t.remove()}this.debug&&(this.jsonTextArea&&this.jsonTextArea.remove(),this.jsonTextArea=document.createElement("textarea"),this.jsonTextArea.style.width="100%",this.jsonTextArea.value=JSON.stringify(this.groups,null,4),this.debug.appendChild(this.jsonTextArea));for(const e in this.groups){const t=this.groups[e];this.buildGroupRasp(t)}}buildGroupRasp(e){const t=document.createElement("div"),n=this.buildTable(e),r=document.createElement("h2");r.innerText=`Группа - ${e.group}`,t.appendChild(r),t.appendChild(n),this.timetable.appendChild(t)}buildTable(e){const t=document.createElement("table"),n=Math.max(...e.days.map((e=>e.lessons.length))),r=t.insertRow(),o=r.insertCell();o.textContent="№",o.rowSpan=3;for(const t of e.days){const e=r.insertCell();e.colSpan=5,e.textContent=t.day}const i=t.insertRow();for(const t of e.days){const e=i.insertCell();e.colSpan=5,e.textContent=t.weekday}const s=t.insertRow();for(const t of e.days){const e=s.insertCell();e.textContent="Дисциплина",e.colSpan=2,s.insertCell().textContent="Вид",s.insertCell().textContent="Ауд.",s.insertCell().textContent="Преподаватель"}for(let r=0;r<n;r++){const n=Math.max(...e.days.map((e=>{const t=e.lessons[r];return Array.isArray(t)?t.length:1}))),o=[];for(let e=0;e<n;e++)o.push(t.insertRow());const i=o[0],s=i.insertCell();s.rowSpan=n,s.textContent=String(r+1);for(const t of e.days){const e=t.lessons[r];if(e)if(Array.isArray(e))for(let t=0;t<n;t++){const n=e[t];null!=n?(o[t].insertCell().textContent=String(n.subgroup)+".",o[t].insertCell().textContent=n.lesson,o[t].insertCell().textContent=n.type,o[t].insertCell().textContent=n.cabinet,o[t].insertCell().textContent=n.teacher):o[t].insertCell().colSpan=5}else{const t=i.insertCell();t.rowSpan=n,t.colSpan=2,t.textContent=e.lesson;const r=i.insertCell();r.rowSpan=n,r.textContent=e.type;const o=i.insertCell();o.rowSpan=n,o.textContent=e.cabinet;const s=i.insertCell();s.rowSpan=n,s.textContent=e.teacher}else{const e=i.insertCell();e.colSpan=5,e.rowSpan=n}}}return t}}},391:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createIframe=void 0,t.createIframe=async function(e,t,n=!0){const r=document.createElement("iframe");return r.sandbox.value="allow-same-origin",r.srcdoc=t,r.width="100%",n&&(r.style.display="none"),e.appendChild(r),await new Promise((e=>{r.onload=()=>{e()}})),r}},797:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractParser=void 0,t.AbstractParser=class{window;_bodyTables=void 0;constructor(e){this.window=e}get document(){return this.window.document}querySelectorAll(e){return this.document.querySelectorAll(e)}querySelector(e){return this.document.querySelector(e)}parseBodyTables(e=!1){return(e||void 0===this._bodyTables)&&(this._bodyTables=Array.from(this.document.querySelectorAll("body table"))),this._bodyTables}parseDayName(e){const t=e.match(/-\s(.+),\s?(.+)/i)?.slice(1);if(!t)throw new Error("could not parse day name");return{day:t[1],weekday:t[0]}}clearElementText(e){return e?.replaceAll("\n","").replaceAll("<br>","").replaceAll("&nbsp;","").replace(/\s+/g," ").trim()}removeDashes(e){return e?.trim().replaceAll(/^-((\s-)?)+$/gi,"").trim()}setNullIfEmpty(e){return""===e||void 0===e?null:e}parseGroupNumber(e){return e?.replace(/\*$/i,"")}parseSubGroupLesson(e,t){let n=!1;for(const t of e)if(/^\d+\./.test(t[0])){n=!0;break}if(!n)return null;if(e.length!=t.length)throw new Error("subgroups and cabinets not equal");const r=[];for(const n in e){const o=e[n],i=t[n],s=o[0].match(/(\d+)\.\s?(.+)/)?.slice(1),l=o[1].match(/\((.+)\)/)?.slice(1)[0];if(!s||!l)throw new Error("group name or group type match error");r.push({subgroup:Number(s[0]),lesson:s[1],type:l,teacher:o[2],cabinet:this.setNullIfEmpty(this.removeDashes(i))})}return r}}},345:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(593),o=n(797);class i extends o.AbstractParser{groups={};run(e){e&&(this.groups=e);for(const e of this.parseBodyTables())this.parseTable(e);return this.groups}getGroupsPositions(e){const t=[];for(const n in e){const r=e[n].cells;if(0!==r.length&&r[0].textContent?.includes("№"))for(const e in r){const o=r[e].textContent;if(null==o)continue;const i=this.parseGroupNumber(this.clearElementText(o));i&&!isNaN(+i)&&t.push({group:String(i),groupText:o,row:+n,cell:+e})}}return t}parseLessons(e,t){const n=[];for(const o in e){if(+o<=t.row+1)continue;const i=e[o].cells;if(0===i.length)continue;const s=i[0].textContent;if(null==s||isNaN(+s))break;const l=i[2*t.cell-1];let a=l.textContent?.trim();const c=i[2*t.cell];let u=c.textContent?.trim();if(null==a||null==u)continue;a=this.setNullIfEmpty(a),u=this.setNullIfEmpty(this.removeDashes(u));let p=null;if(!a){n.push(null);continue}{const e=(0,r.chunkArray)(Array.from(l.childNodes).filter((e=>e.nodeType===e.TEXT_NODE)).map((e=>e.textContent)),3),t=Array.from(c.childNodes).filter((e=>e.nodeType===e.TEXT_NODE)).map((e=>e.textContent));if(p=this.parseSubGroupLesson(e,t),p){n.push(p);continue}}const f=Array.from(l.childNodes).filter((e=>e.nodeType===e.TEXT_NODE)).map((e=>e.textContent)),d=f[1].match(/\((.+)\)/)?.slice(1)[0];if(!d)throw new Error("group type match error");n.push({lesson:f[0],type:d,teacher:f[2],cabinet:u})}return n}clearEndingNull(e){let t=0;for(const n of e)null!==n?t=0:t++;e.splice(e.length-t,t)}parseTable(e){const t=e.caption?.textContent;if(!t)throw new Error("Day name is not provided");const{day:n,weekday:r}=this.parseDayName(t),o=Array.from(e.rows),i=this.getGroupsPositions(o);for(const e of i){const t=e.group;void 0===this.groups[t]&&(this.groups[t]={group:e.groupText,days:[]});const i=this.parseLessons(o,e);this.clearEndingNull(i),this.groups[t].days.push({weekday:r,day:n,lessons:i})}}}t.default=i},593:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.chunkArray=t.readFile=void 0,t.readFile=function(e,t){const n=new FileReader,r=new Promise((e=>{n.onload=t=>{e(n.result)}}));return n.readAsText(e,t),r},t.chunkArray=function(e,t){const n=[];for(let r=0;r<Math.ceil(e.length/t);r++){const o=[];for(let n=0;n<t;n++){const i=r*t+n;o.push(e[i])}n.push(o)}return n}},573:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Viewer=void 0,t.Viewer=class{static init(e){return new this(e)}inputSelector;outputSelector;timetable=null;groups={};constructor(e){this.inputSelector=e.input,this.outputSelector=e.output,window.addEventListener("load",this.onLoad.bind(this))}onLoad(){this.timetable=document.querySelector(this.outputSelector);const e=document.querySelector(this.inputSelector)?.textContent||null;if(this.timetable)if(e){try{this.groups=JSON.parse(e)}catch(e){return void console.error("cannot parse json block",e)}for(const e in this.groups){const t=this.groups[e];this.buildGroupRasp(e,t)}}else console.error("Input selector is not found");else console.error("Output selector is not found")}buildGroupRasp(e,t){const n=document.createElement("div");n.className="group-block",n.dataset.group=e;const r=this.buildTables(t),o=document.createElement("h2");o.innerText=`Группа - ${t.group}`,n.appendChild(o),n.appendChild(r),this.timetable.appendChild(n)}buildTables(e){const t=document.createElement("div");t.className="timetable-grid";for(const n of e.days)t.appendChild(this.buildDay(n));return t}buildDay(e){const t=document.createElement("table");t.className="timetable-block";const n=t.insertRow().insertCell();n.colSpan=5,n.textContent=`${e.weekday}, ${e.day}`,n.className="center";const r=t.insertRow();r.className="center",r.insertCell().textContent="№",r.insertCell().textContent="Дисциплина",r.insertCell().textContent="Вид",r.insertCell().textContent="Аудитория",r.insertCell().textContent="Преподаватель";for(const n in e.lessons){const r=e.lessons[n],o=t.insertRow(),i=o.insertCell();if(i.textContent=String(+n+1),i.className="center",!r){o.insertCell().colSpan=4;continue}const s=o.insertCell(),l=o.insertCell(),a=o.insertCell(),c=o.insertCell();l.className="center",a.className="center";let u=[];u=Array.isArray(r)?r:[r];for(const e of u){const t=s.appendChild(document.createElement("p")),n=l.appendChild(document.createElement("p")),r=a.appendChild(document.createElement("p")),o=c.appendChild(document.createElement("p")),i=e.subgroup?`${e.subgroup}. `:"";t.textContent+=`${i}${e.lesson}`,n.textContent+=e.type,r.textContent+=e.cabinet||"-",o.textContent+=e.teacher}}return t}}},655:(e,t,n)=>{n.r(t),n.d(t,{__assign:()=>i,__asyncDelegator:()=>C,__asyncGenerator:()=>v,__asyncValues:()=>_,__await:()=>g,__awaiter:()=>u,__classPrivateFieldGet:()=>j,__classPrivateFieldIn:()=>P,__classPrivateFieldSet:()=>E,__createBinding:()=>f,__decorate:()=>l,__exportStar:()=>d,__extends:()=>o,__generator:()=>p,__importDefault:()=>T,__importStar:()=>O,__makeTemplateObject:()=>x,__metadata:()=>c,__param:()=>a,__read:()=>y,__rest:()=>s,__spread:()=>m,__spreadArray:()=>w,__spreadArrays:()=>b,__values:()=>h});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function l(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function a(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function u(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((r=r.apply(e,t||[])).next())}))}function p(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(l){return function(a){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,l[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,r=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,a])}}}var f=Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function d(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||f(t,e,n)}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(y(arguments[t]));return e}function b(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,l=i.length;s<l;s++,o++)r[o]=i[s];return r}function w(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function v(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||l(e,t)}))})}function l(e,t){try{(n=o[e](t)).value instanceof g?Promise.resolve(n.value.v).then(a,c):u(i[0][2],n)}catch(e){u(i[0][3],e)}var n}function a(e){l("next",e)}function c(e){l("throw",e)}function u(e,t){e(t),i.shift(),i.length&&l(i[0][0],i[0][1])}}function C(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:g(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function x(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var S=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function O(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&f(t,e,n);return S(t,e),t}function T(e){return e&&e.__esModule?e:{default:e}}function j(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function E(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}function P(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=n(254),t=n(573);window.KellerMGKE={Builder:e.Builder,Viewer:t.Viewer}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,